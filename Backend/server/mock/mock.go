// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go

// Package mock is a generated GoMock package.
package mock

import (
	models "FPproject/Backend/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// DelAdd mocks base method.
func (m *Mockrepository) DelAdd(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelAdd", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelAdd indicates an expected call of DelAdd.
func (mr *MockrepositoryMockRecorder) DelAdd(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelAdd", reflect.TypeOf((*Mockrepository)(nil).DelAdd), id)
}

// DelCI mocks base method.
func (m *Mockrepository) DelCI(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelCI", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelCI indicates an expected call of DelCI.
func (mr *MockrepositoryMockRecorder) DelCI(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelCI", reflect.TypeOf((*Mockrepository)(nil).DelCI), id)
}

// DelFood mocks base method.
func (m *Mockrepository) DelFood(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelFood", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelFood indicates an expected call of DelFood.
func (mr *MockrepositoryMockRecorder) DelFood(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelFood", reflect.TypeOf((*Mockrepository)(nil).DelFood), id)
}

// DelUH mocks base method.
func (m *Mockrepository) DelUH(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelUH", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelUH indicates an expected call of DelUH.
func (mr *MockrepositoryMockRecorder) DelUH(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelUH", reflect.TypeOf((*Mockrepository)(nil).DelUH), id)
}

// DelUser mocks base method.
func (m *Mockrepository) DelUser(id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelUser", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelUser indicates an expected call of DelUser.
func (mr *MockrepositoryMockRecorder) DelUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelUser", reflect.TypeOf((*Mockrepository)(nil).DelUser), id)
}

// GetAdd mocks base method.
func (m *Mockrepository) GetAdd(id string) (models.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdd", id)
	ret0, _ := ret[0].(models.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdd indicates an expected call of GetAdd.
func (mr *MockrepositoryMockRecorder) GetAdd(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdd", reflect.TypeOf((*Mockrepository)(nil).GetAdd), id)
}

// GetCI mocks base method.
func (m *Mockrepository) GetCI(id string) (models.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCI", id)
	ret0, _ := ret[0].(models.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCI indicates an expected call of GetCI.
func (mr *MockrepositoryMockRecorder) GetCI(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCI", reflect.TypeOf((*Mockrepository)(nil).GetCI), id)
}

// GetFood mocks base method.
func (m *Mockrepository) GetFood(id string) (models.Food, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFood", id)
	ret0, _ := ret[0].(models.Food)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFood indicates an expected call of GetFood.
func (mr *MockrepositoryMockRecorder) GetFood(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFood", reflect.TypeOf((*Mockrepository)(nil).GetFood), id)
}

// GetUH mocks base method.
func (m *Mockrepository) GetUH(id string) (models.UserHealth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUH", id)
	ret0, _ := ret[0].(models.UserHealth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUH indicates an expected call of GetUH.
func (mr *MockrepositoryMockRecorder) GetUH(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUH", reflect.TypeOf((*Mockrepository)(nil).GetUH), id)
}

// GetUser mocks base method.
func (m *Mockrepository) GetUser(id string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockrepositoryMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*Mockrepository)(nil).GetUser), id)
}

// InsertAdd mocks base method.
func (m *Mockrepository) InsertAdd(id string, add models.Address) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAdd", id, add)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertAdd indicates an expected call of InsertAdd.
func (mr *MockrepositoryMockRecorder) InsertAdd(id, add interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAdd", reflect.TypeOf((*Mockrepository)(nil).InsertAdd), id, add)
}

// InsertCI mocks base method.
func (m *Mockrepository) InsertCI(ci models.CartItem) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCI", ci)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCI indicates an expected call of InsertCI.
func (mr *MockrepositoryMockRecorder) InsertCI(ci interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCI", reflect.TypeOf((*Mockrepository)(nil).InsertCI), ci)
}

// InsertFood mocks base method.
func (m *Mockrepository) InsertFood(f models.Food) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFood", f)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertFood indicates an expected call of InsertFood.
func (mr *MockrepositoryMockRecorder) InsertFood(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFood", reflect.TypeOf((*Mockrepository)(nil).InsertFood), f)
}

// InsertUH mocks base method.
func (m *Mockrepository) InsertUH(id string, h models.UserHealth) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUH", id, h)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUH indicates an expected call of InsertUH.
func (mr *MockrepositoryMockRecorder) InsertUH(id, h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUH", reflect.TypeOf((*Mockrepository)(nil).InsertUH), id, h)
}

// InsertUser mocks base method.
func (m *Mockrepository) InsertUser(user models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockrepositoryMockRecorder) InsertUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*Mockrepository)(nil).InsertUser), user)
}

// UpdateAdd mocks base method.
func (m *Mockrepository) UpdateAdd(add models.Address) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAdd", add)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAdd indicates an expected call of UpdateAdd.
func (mr *MockrepositoryMockRecorder) UpdateAdd(add interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAdd", reflect.TypeOf((*Mockrepository)(nil).UpdateAdd), add)
}

// UpdateCI mocks base method.
func (m *Mockrepository) UpdateCI(f models.CartItem) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCI", f)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCI indicates an expected call of UpdateCI.
func (mr *MockrepositoryMockRecorder) UpdateCI(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCI", reflect.TypeOf((*Mockrepository)(nil).UpdateCI), f)
}

// UpdateFood mocks base method.
func (m *Mockrepository) UpdateFood(f models.Food) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFood", f)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFood indicates an expected call of UpdateFood.
func (mr *MockrepositoryMockRecorder) UpdateFood(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFood", reflect.TypeOf((*Mockrepository)(nil).UpdateFood), f)
}

// UpdateUH mocks base method.
func (m *Mockrepository) UpdateUH(h models.UserHealth) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUH", h)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUH indicates an expected call of UpdateUH.
func (mr *MockrepositoryMockRecorder) UpdateUH(h interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUH", reflect.TypeOf((*Mockrepository)(nil).UpdateUH), h)
}

// UpdateUser mocks base method.
func (m *Mockrepository) UpdateUser(user models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockrepositoryMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*Mockrepository)(nil).UpdateUser), user)
}
